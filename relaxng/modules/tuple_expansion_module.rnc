namespace dc = "http://purl.org/dc/elements/1.1/"
namespace dcterms = "http://purl.org/dc/terms/"

dcterms:title [ "RuleML Tuples" ]
dcterms:identifier [ "http://deliberation.ruleml.org/1.03/relaxng/modules/tuple_expansion_module.rnc" ]
dcterms:isPartOf [ "http://deliberation.ruleml.org/1.03/spec" ]
dcterms:creator [ "http://wiki.ruleml.org/index.php/User:Athant" ]
dc:subject [ "RuleML, tuple" ]
dcterms:description [ "The expansion module for tuples." ]
dcterms:language [ "en" ]
dc:rights [
  'Copyright 2015 RuleML Inc. -- Licensed under the RuleML Specification License, Version 1.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://ruleml.org/licensing/RSL1.0-RuleML. Disclaimer: THIS SPECIFICATION IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, ..., EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. See the License for the specifics governing permissions and limitations under the License.'
]
dcterms:rights [ "http://ruleml.org/licensing/RSL1.0-RuleML" ]
dcterms:relation [ "http://deliberation.ruleml.org" ]
start |= Tuple.Node.def
Node.choice |= Tuple.Node.def
# This module declares the following RuleML elements and attributes:
#            * <Tuple>

## an extension point for specializations of the tuple tag name.  
Tuple-node.choice |= Tuple.Node.def
## The children of a tuple are divided into two sections, 
## a header section for modifiers, and a main section for the tuple arguments. 
Tuple.Node.def =
  
  ## A collection of (ordered) arguments (optionally enclosed by <arg>).
  ## Positional rest variables (<repo>) are also permitted.
  element Tuple { Tuple.type.def }
Tuple.type.def = Tuple.attlist, Tuple.header, Tuple.main

Tuple.attlist &= commonNode.attlist?

## Tuples accept the header pattern common to Nodes.
Tuple.header &= Node.header?
# For the declaration of the Node header, see the module meta_expansion_module).

## A tuple within a positional rest variable contains a positional argument sequence
Tuple.main |= positionalArgumentsForAtoms.sequence
# The pattern for positional argument sequences is arity-dependent,
# see the arity modules (posseq_bin_module, posseq_module).

