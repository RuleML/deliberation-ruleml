<?xml version="1.0" encoding="utf-8"?>
<RuleML xmlns="http://www.ruleml.org/1.0/xsd"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.ruleml.org/1.0/xsd http://www.ruleml.org/1.0/xsd/framehohornlogeq.xsd">

  <Assert>
    <Entails>
      <!-- a trivial example rulebase for testing the framehohornlogeq RuleML sublanguage -->
      <Rulebase>
        <!-- from SWSL document at http://www.daml.org/services/swsl/report/swsl.shtml -->
        <!-- section 6.2 -->
        <!-- explicit equality -->
        <Implies>
          <then>
            <Equal>
              <Uniterm>
                <op>
                  <Const>f</Const>
                </op>
                <Const>a</Const>
                <Var>X</Var>
              </Uniterm>
              <Uniterm>
                <op>
                  <Const>g</Const>
                </op>
                <Var>Y</Var>
                <Const>b</Const>
              </Uniterm>
            </Equal>
          </then>
          <if>
            <Uniterm>
              <op>
                <Const>p</Const>
              </op>
              <Var>X</Var>
              <Var>Y</Var>
            </Uniterm>
          </if>
        </Implies>
        <!-- section 6.3 -->
        <!-- non-positional Atom with required oid and optional op -->
        <Atom>
          <oid>
            <Const>o</Const>
          </oid>
          <op>
            <Const>test relation</Const>
          </op>
          <slot>
            <Uniterm>
              <Const>f</Const>
              <Const>a</Const>
              <Const>b</Const>
            </Uniterm>
            <Const>3</Const>
          </slot>
        </Atom>
        <!-- singleton slot -->
        <Atom>
          <oid>
            <Const>mary</Const>
          </oid>
          <slot>
            <Const>female</Const>
          </slot>
        </Atom>
        <!-- new set-valued tag -->
        <Atom>
          <oid>
            <Const>t'</Const>
          </oid>
          <slot>
            <Const>m'</Const>
            <Set>
              <Const>v1'</Const>
              <Const>...</Const>
              <Const>vk'</Const>
            </Set>
          </slot>
        </Atom>
        <!-- class membership and subclass molecules -->
        <InstanceOf>
          <Const>t'</Const>
          <Const>s'</Const>
        </InstanceOf>
        <SubclassOf>
          <Uniterm>
            <Const>t'</Const>
          </Uniterm>
          <Uniterm>
            <Const>s'</Const>
          </Uniterm>
        </SubclassOf>
        <!-- signature molecule -->
        <Signature>
          <oid>
            <Const>t'</Const>
          </oid>
          <slot>
            <Const>m'</Const>
            <Const>v'</Const>
          </slot>
        </Signature>
        <!-- boolean signature molecule -->
        <Signature>
          <oid>
            <Const>t'</Const>
          </oid>
          <slot>
            <Const>m'</Const>
          </slot>
        </Signature>
        <!-- cardinality Conststraints -->
        <Signature>
          <oid>
            <Const>t'</Const>
          </oid>
          <slot minCard="0" maxCard="1">
            <Uniterm>
              <Const>s'</Const>
              <Const>t1'</Const>
              <Const>...</Const>
              <Const>tn'</Const>
            </Uniterm>
            <Const>v'</Const>
          </slot>
        </Signature>
        <!-- Slot access and path expressions -->
        <Uniterm>
          <oid>
            <Const>r</Const>
          </oid>
          <op>
            <Const>s</Const>
          </op>
          <Get>
            <oid>
              <Const>room</Const>
            </oid>
            <SlotProd>
              <Const>ceiling</Const>
              <Const>color</Const>
            </SlotProd>
          </Get>
        </Uniterm>
        <!-- section 6.4 -->
        <!-- reification -->
        <Uniterm>
          <oid>
            <Const>a</Const>
          </oid>
          <op>
            <Const />
          </op>
          <slot>
            <Const>b</Const>
            <Uniterm>
              <op>
                <Const>p</Const>
              </op>
              <Uniterm>
                <oid>
                  <Var>X</Var>
                </oid>
                <op>
                  <Const />
                </op>
                <slot>
                  <Const>foo</Const>
                  <Const>bar</Const>
                </slot>
              </Uniterm>
            </Uniterm>
          </slot>
        </Uniterm>
        <Uniterm>
          <oid>
            <Const>john</Const>
          </oid>
          <op>
            <Const />
          </op>
          <slot>
            <Const>believes</Const>
            <Uniterm>
              <op>
                <Const>p</Const>
              </op>
              <Var>X</Var>
            </Uniterm>
          </slot>
        </Uniterm>
        <!-- miscellaneous stuff, same as from hohornlog  -->
        <Implies>
          <then>
            <Equal>
              <Const>some Conststant</Const>
              <Var>d</Var>
            </Equal>
          </then>
          <if>
            <And>
              <Or>
                <Equal>
                  <Const>some Conststant</Const>
                  <Var>d</Var>
                </Equal>
                <Uniterm>
                  <Const>unequal</Const>
                  <Var>x</Var>
                  <Var>person</Var>
                </Uniterm>
              </Or>
            </And>
          </if>
        </Implies>
        <Equal>
          <Const>some Conststant</Const>
          <Var>d</Var>
        </Equal>
        <Equal>
          <Uniterm>
            <op>
              <Const>some function</Const>
            </op>
            <Const>arg1</Const>
            <Const>arg2</Const>
            <Const>arg3</Const>
          </Uniterm>
          <Uniterm>
            <op>
              <Const>some other function</Const>
            </op>
            <Const>arg4</Const>
            <Const>arg5</Const>
            <Const>arg6</Const>
          </Uniterm>
        </Equal>
        <Forall>
          <Var>d</Var>
          <Equal>
            <Const>some Conststant</Const>
            <Var>d</Var>
          </Equal>
        </Forall>
        <Equivalent>
          <Equal>
            <Const>some Conststant</Const>
            <Var>d</Var>
          </Equal>
          <Equal>
            <Const>some Conststant</Const>
            <Var>e</Var>
          </Equal>
        </Equivalent>
        <Implies>
          <then>
            <Uniterm>
              <op>
                <Const>friend</Const>
              </op>
              <slot>
                <Const>t</Const>
                <Var>b</Var>
              </slot>
              <Var>x</Var>
              <Var>y</Var>
              <Const>Steph</Const>
            </Uniterm>
          </then>
          <if>
            <And>
              <Or>
                <Atom>
                  <oid>
                    <Const>o</Const>
                  </oid>
                  <Const>unequal</Const>
                </Atom>
              </Or>
            </And>
          </if>
        </Implies>
        <Equivalent>
          <Uniterm>
            <Const>unequal</Const>
            <Var>x</Var>
            <Var>person</Var>
          </Uniterm>
          <Uniterm>
            <Const>unequal</Const>
            <Var>x</Var>
            <Var>person</Var>
          </Uniterm>
        </Equivalent>
        <Forall>
          <Var>x</Var>
          <Uniterm>
            <Const>unequal</Const>
            <Var>x</Var>
            <Var>person</Var>
          </Uniterm>
        </Forall>
      </Rulebase>
      <Rulebase>
        <Implies>
          <then>
            <Neg>
              <And>
                <Uniterm>
                  <Const>pricediscount</Const>
                  <Var>CUST</Var>
                  <Var>Y</Var>
                </Uniterm>
                <Uniterm>
                  <Const>pricediscount</Const>
                  <Var>CUST</Var>
                  <Var>Z</Var>
                </Uniterm>
              </And>
            </Neg>
          </then>
          <if>
            <Neg>
              <Equal>
                <Var>Y</Var>
                <Var>Z</Var>
              </Equal>
            </Neg>
          </if>
        </Implies>
        <Neg>
          <And>
            <Uniterm>
              <Const>pricediscount</Const>
              <Var>CUST</Var>
              <Const>fivepercent</Const>
            </Uniterm>
            <Uniterm>
              <Const>pricediscount</Const>
              <Var>CUST</Var>
              <Const>tenpercent</Const>
            </Uniterm>
          </And>
        </Neg>
      </Rulebase>
    </Entails>
  </Assert>
</RuleML>
