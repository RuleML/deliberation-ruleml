default namespace = "http://ruleml.org/spec"

start =
  torso
  | Implies
  | Query
  | Assert
  | Retract
  | Data
  | arg
  | Atom
  | oid
  | if
  | Rulebase
  | slot
  | Reify
  | Equivalent
  | op
  | Rel
  | Ind
  | declare
  | degree
  | Forall
  | Exists
  | then
  | Or
  | Skolem
  | RuleML
  | act
  | Var
  | Entails
  | And
torso = element torso { Atom }
Implies =
  element Implies {
    attribute material { xsd:NMTOKEN "yes" | xsd:NMTOKEN "no" }?,
    attribute direction {
      xsd:NMTOKEN "backward"
      | xsd:NMTOKEN "forward"
      | xsd:NMTOKEN "bidirectional"
    }?,
    attribute closure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    ((then, if)
     | (if, then)
     | ((Atom | And | Or), Atom))
  }
Query =
  element Query {
    attribute closure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    (formula | Rulebase | Atom | And_2 | Or_2 | Entails | Exists)*
  }
Assert =
  element Assert {
    attribute mapMaterial { xsd:NMTOKEN "yes" | xsd:NMTOKEN "no" }?,
    attribute mapClosure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    attribute mapDirection {
      xsd:NMTOKEN "backward"
      | xsd:NMTOKEN "forward"
      | xsd:NMTOKEN "bidirectional"
    }?,
    oid?,
    (formula_2
     | Rulebase
     | Atom
     | Implies
     | Equivalent
     | Entails
     | Forall)*
  }
Retract =
  element Retract {
    attribute mapMaterial { xsd:NMTOKEN "yes" | xsd:NMTOKEN "no" }?,
    attribute mapClosure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    attribute mapDirection {
      xsd:NMTOKEN "backward"
      | xsd:NMTOKEN "forward"
      | xsd:NMTOKEN "bidirectional"
    }?,
    oid?,
    (formula_2
     | Rulebase
     | Atom
     | Implies
     | Equivalent
     | Entails
     | Forall)*
  }
Data =
  element Data {
    text
    & (attribute * { text }
       | _1)*
  }
arg =
  element arg {
    attribute index { xsd:positiveInteger },
    (Ind | Data | Var | Skolem | Reify)
  }
Atom =
  element Atom {
    attribute closure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    degree?,
    (op | Rel),
    slot*,
    ((arg | Ind | Data | Var | Skolem | Reify)+, slot*)?
  }
oid = element oid { Ind | Data | Var | Skolem | Reify }
if = element if { Atom | And | Or }
Rulebase =
  element Rulebase {
    attribute mapMaterial { xsd:NMTOKEN "yes" | xsd:NMTOKEN "no" }?,
    attribute mapDirection {
      xsd:NMTOKEN "backward"
      | xsd:NMTOKEN "forward"
      | xsd:NMTOKEN "bidirectional"
    }?,
    attribute mapClosure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    (formula_3 | Atom | Implies | Equivalent | Forall)*
  }
slot =
  element slot {
    attribute weight {
      xsd:decimal { minInclusive = "0" maxInclusive = "1" }
    }?,
    attribute card { xsd:nonNegativeInteger }?,
    (Ind | Data),
    (Ind | Data | Var | Skolem | Reify)
  }
Reify =
  element Reify {
    (torso
     | Implies
     | Query
     | Assert
     | Retract
     | Data
     | arg
     | Atom
     | oid
     | if
     | Rulebase
     | slot
     | Reify
     | Equivalent
     | op
     | Rel
     | Ind
     | declare
     | degree
     | Forall
     | Exists
     | then
     | Or
     | Skolem
     | RuleML
     | act
     | Var
     | Entails
     | And)?
  }
Equivalent =
  element Equivalent {
    attribute closure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    ((torso, torso) | (Atom, Atom))
  }
op = element op { Rel }
Rel =
  element Rel {
    text
    & attribute iri { xsd:anyURI }?
  }
Ind =
  element Ind {
    text
    & (attribute iri { xsd:anyURI }?,
       attribute type { xsd:string }?)
  }
declare = element declare { Var }
degree = element degree { Data }
Forall =
  element Forall {
    oid?,
    (declare | Var)+,
    (formula_4 | Atom | Implies | Equivalent | Forall)
  }
Exists =
  element Exists {
    oid?, (declare | Var)+, (formula_5 | Atom | And | Or | Exists)
  }
then = element then { Atom }
Or = element Or { oid?, (formula_6 | Atom | And | Or)* }
Skolem =
  element Skolem {
    text
    & attribute type { xsd:string }?
  }
RuleML = element RuleML { oid?, (act | Assert | Retract | Query)* }
act =
  element act {
    attribute index { xsd:positiveInteger },
    (Assert | Retract | Query)
  }
Var =
  element Var {
    text
    & attribute type { xsd:string }?
  }
Entails =
  element Entails { oid?, (if_2 | Rulebase), (then_2 | Rulebase) }
And = element And { oid?, (formula_6 | Atom | And | Or)* }
formula =
  element formula { Rulebase | Atom | And_2 | Or_2 | Entails | Exists }
And_2 =
  element And {
    attribute closure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    (formula_6 | Atom | And | Or)*
  }
Or_2 =
  element Or {
    attribute closure {
      xsd:NMTOKEN "universal" | xsd:NMTOKEN "existential"
    }?,
    oid?,
    (formula_6 | Atom | And | Or)*
  }
formula_2 =
  element formula {
    Rulebase | Atom | Implies | Equivalent | Entails | Forall
  }
_1 =
  element * {
    text
    & (attribute * { text }
       | _1)*
  }
formula_3 = element formula { Atom | Implies | Equivalent | Forall }
formula_4 = element formula { Atom | Implies | Equivalent | Forall }
formula_5 = element formula { Atom | And | Or | Exists }
formula_6 = element formula { Atom | And | Or }
if_2 = element if { Rulebase }
then_2 = element then { Rulebase }
