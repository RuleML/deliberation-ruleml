<?xml version="1.0" encoding="UTF-8"?>

<xs:schema 
targetNamespace="http://ruleml.org/spec" 
xmlns="http://ruleml.org/spec"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
>

	<xs:annotation>
		<xs:documentation xml:lang="en">
			XML Schema for a Horn-Logic RuleML sublanguage with equational logic
			File: hornlogeq.xsd
			Version: 1.0
			Last Modification: 2010-08-17
		</xs:documentation>
	</xs:annotation>
	
	<!-- equalog includes the 'equality' module -->
	<xs:include schemaLocation="modules/equality_module.xsd"/>

	<!-- note the addition of Equal from the equality module -->
	<xs:redefine schemaLocation="_hornlog-to-hornlogeq.xsd">
	
		<!-- add (modified) @per back to Expr -->
		<xs:attributeGroup name="per.attrib">
			<xs:attributeGroup ref="per.attrib"/>
			<xs:attributeGroup ref="per-equality.attrib"/>
		</xs:attributeGroup>
		
		<!-- add @val to Fun -->
		<xs:attributeGroup name="Fun.attlist">
			<xs:attributeGroup ref="Fun.attlist"/>
			<xs:attributeGroup ref="val.attrib"/>
		</xs:attributeGroup>
		
		<!--
			add Equal so that Assert's content model is:
			( meta*, (formula | Rulebase | Atom | Implies | Equivalent | Entails | Forall | Equal)* )
		-->
		<xs:group name="formula-assert.content">
			<xs:choice>
				<xs:group ref="formula-assert.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>	
		</xs:group>
		
		<!--
			add Equal so that Rulebase's content model is:
			( meta*, (formula | Atom | Implies | Equivalent | Forall | Equal)* )
		-->
		<xs:group name="formula-rulebase.content">
			<xs:choice>
				<xs:group ref="formula-rulebase.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>	
		</xs:group>		

		<!--
			add Equal so that then's content model is:
			(Atom | Equal)
		-->
		<xs:group name="then.content">
			<xs:choice>
				<xs:group ref="then.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
		
		<!--
			add Equal so that if's content model is:
			(Atom | And | Or | Equal)
		-->
		<xs:group name="if.content">
			<xs:choice>
				<xs:group ref="if.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
		<!--
			note that the above indirectly adds Equal to Implies so that its content model is:
			( meta*, (then, if) | (if, then) | ( (Atom | And | Or | Equal), (Atom | Equal) ) )
		-->		


		<!--
			add Equal so that formula's content model under Forall is:
			( Atom | Implies | Equivalent | Forall | Equal )
		-->
		<xs:group name="formula-forall.content">
			<xs:choice>
				<xs:group ref="formula-forall.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
		<!--		
			note that the above indirectly adds Equal to Forall so that its content model is:
			( meta*, (declare | Var)+, (formula | Atom | Implies | Equivalent | Forall | Equal) )
		-->

		<!--
			add Equal so that formula's content model under Exists is:
			( Atom | And | Or | Exists | Equal )		
		-->
		<xs:group name="formula-exists.content">
			<xs:choice>
				<xs:group ref="formula-exists.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
		<!--		
			note that the above indirectly adds Equal to Exists so that its content model is:
			( meta*, (declare | Var)+, (formula | Atom | And | Or | Exists | Equal) )
		-->


		<!--
			add Equal so that Query's content model is:
			( meta*, (formula | Atom | Rulebase | And | Or | Entails | Exists | Equal)* )
		-->
		<xs:group name="formula-query.content">
			<xs:choice>
				<xs:group ref="formula-query.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
	

		<!--
			add Equal so that formula's content model (below And/Or) is:
			(Atom | And | Or | Equal)
		-->
		<xs:group name="formula-and-or.content">
			<xs:choice>
				<xs:group ref="formula-and-or.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
		<!--
			note that the above indirectly adds Equal to And/Or so that their content models are:
			( meta*, (formula | Atom | And | Or | Equal)* )
		-->

		<!--
			add Equal so that torso's content model is:
			(Atom | Equal)
		-->
		<xs:group name="torso.content">
			<xs:choice>
				<xs:group ref="torso.content"/>
				<xs:element ref="Equal"/>
			</xs:choice>
		</xs:group>
		<!--
			note that the above indirectly adds Equal to Equivalent so that its content model is:
			( meta*, ( (torso, torso) | ( (Atom | Equal), (Atom | Equal) ) ) )
		-->		
		
	</xs:redefine>

</xs:schema>