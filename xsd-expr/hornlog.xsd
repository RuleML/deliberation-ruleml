<?xml version="1.0" encoding="UTF-8"?>

<xs:schema
targetNamespace="http://ruleml.org/spec"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns="http://ruleml.org/spec"
elementFormDefault="qualified">
	
<!-- note that elementFormDefault is qualified because of local declarations -->
	
	<xs:annotation>
		<xs:documentation xml:lang="en">
			XML Schema for a Horn-Logic RuleML sublanguage
			File: hornlog.xsd
			Version: 1.0
			Last Modification: 2011-10-06
		</xs:documentation>
	</xs:annotation>
	
	<!-- hornlog includes the 'expr' and 'rest' modules -->
	<xs:redefine schemaLocation="modules/expr_module.xsd">
	  <xs:attributeGroup name="per.attrib">
	    <xs:attributeGroup ref="per.attrib"/>	  
	  </xs:attributeGroup>
	  <xs:attributeGroup name="Fun.attlist">
	    <xs:attributeGroup ref="iri.attrib"/>
	    <xs:attributeGroup ref="node.attrib"/>
	    <xs:attributeGroup ref="xml.attlist"/>
	  </xs:attributeGroup>
	  <xs:attributeGroup name="Expr.attlist">
	    <xs:attributeGroup ref="node.attrib"/>
	    <xs:attributeGroup ref="xml.attlist"/>
	  </xs:attributeGroup>
	  <xs:complexType name="Expr.type">
	    <xs:complexContent>
	      <xs:restriction base="Expr.type">
	        <xs:group ref="Expr.content"/>
	        <xs:attributeGroup ref="Expr.attlist"/>
	      </xs:restriction>
	    </xs:complexContent>
	  </xs:complexType>
	  <xs:complexType name="Fun.type">
	    <xs:complexContent>
	      <xs:restriction base="Fun.type">
	        <xs:group ref="Fun.content"/>
	        <xs:attributeGroup ref="Fun.attlist"/>
	      </xs:restriction>
	    </xs:complexContent>
	  </xs:complexType>
	  
	</xs:redefine>
	<xs:redefine schemaLocation="modules/rest_module.xsd"/>
	
	<!-- note the addition of Expr and Plexs from the expr module -->
	<xs:redefine schemaLocation="datalog.xsd">
		<!--
			add Exprs and Plexs so that arg's content model is:
			(Ind | Data | Skolem | Var | Reify | Expr | Plex)
		-->
		<xs:group name="arg.content">
			<xs:choice>
				<xs:group ref="arg.content"/>
				<xs:element ref="Expr"/>
				<xs:element name="Plex" type="Plex.type"/>
			</xs:choice>
		</xs:group>

		<!--
			note that the above indirectly adds Expr and Plex to Atom so that its content model is:
			(
				meta*, oid?, (op | Rel), slot*,
				( (arg|Ind|Data|Skolem|Var|Reify|Expr|Plex)+, slot* )?
			)
			
			... as well as to slot so that its content model is:
	   		( (Ind|Data), (Ind|Data|Skolem|Var|Reify|Expr|Plex) )
		-->
		
		<!--
			add Exprs and Plexs so that slot's content model is:
			( (Ind|Data|Expr|Plex), (Ind|Data|Skolem|Var|Reify|Expr|Plex) )
		-->
		<xs:group name="slot-name.extend">
			<xs:choice>
				<xs:group ref="slot-name.extend"/>
				<xs:element ref="Expr"/>
				<xs:element name="Plex" type="Plex.type"/>
			</xs:choice>
		</xs:group>
		
		<!--
			add Expr and Plex to oid so that its content model is:
			(Ind | Data | Var | Skolem | Reify | Expr | Plex)
		-->
		<xs:group name="oid.content">
			<xs:choice>
				<xs:group ref="oid.content"/>
				<xs:element ref="Expr"/>
				<xs:element name="Plex" type="Plex.type"/>
			</xs:choice>
		</xs:group>
		
		<!--
			add repo and resl so that Atom's content model is:
			(
				meta*, oid?, (op | Rel), slot*,
				( 
					( 
						((arg|Ind|Data|Skolem|Var|Reify|Expr|Plex)+, repo?)
						|
						repo
					),
					slot*)?, 
				resl?
			)			
		-->
		<xs:group name="Atom-repo.extend">
			<xs:choice>
				<xs:group ref="Atom-repo.extend"/>
				<xs:element ref="repo"/>
			</xs:choice>
		</xs:group>
		<xs:group name="Atom-arg.extend">
			<xs:sequence>
				<xs:group ref="Atom-arg.extend"/>
				<xs:element ref="repo" minOccurs="0"/>
			</xs:sequence>
		</xs:group>
		<xs:group name="Atom-slots.extend2">
			<xs:sequence>
				<xs:group ref="Atom-slots.extend2"/>
				<xs:element ref="resl" minOccurs="0"/>
			</xs:sequence>
		</xs:group>
	  
	  <xs:group name="then.content">
	    <xs:choice>
	      <xs:group ref="then.content"/>		
	    </xs:choice>
	  </xs:group>
	  <xs:group name="formula-and-or.content">
	    <xs:choice>
	      <xs:group ref="formula-and-or.content"/>
	    </xs:choice>	
	  </xs:group>
	  <xs:group name="if.content">
	    <xs:choice>
	      <xs:group ref="if.content"/>		
	    </xs:choice>
	  </xs:group>
	  <xs:group name="formula-query.content">
	    <xs:choice>
	      <xs:group ref="formula-query.content"/>
	    </xs:choice>	
	  </xs:group>
	  <xs:group name="formula-assert.content">
	    <xs:choice>
	      <xs:group ref="formula-assert.content"/>
	    </xs:choice>	
	  </xs:group>	
	  <xs:group name="formula-rulebase.content">
	    <xs:choice>
	      <xs:group ref="formula-rulebase.content"/>
	    </xs:choice>	
	  </xs:group>	
	  <xs:attributeGroup name="iri.attrib">
	    <xs:attributeGroup ref="iri.attrib"></xs:attributeGroup>
	  </xs:attributeGroup>
		<xs:attributeGroup name="And-query.attlist">
			<xs:attributeGroup ref="And-query.attlist"/>
		</xs:attributeGroup>	
		<xs:attributeGroup name="And-inner.attlist">	
			<xs:attributeGroup ref="And-inner.attlist"/>
		</xs:attributeGroup>	
		<xs:attributeGroup name="Or-query.attlist">
			<xs:attributeGroup ref="Or-query.attlist"/>
		</xs:attributeGroup>	
		<xs:attributeGroup name="Or-inner.attlist">	
			<xs:attributeGroup ref="Or-inner.attlist"/>
		</xs:attributeGroup>		
		<xs:group name="torso.content">
			<xs:choice>
				<xs:group ref="torso.content"/>
			</xs:choice>
		</xs:group>	
		<xs:attributeGroup name="Implies.attlist">
			<xs:attributeGroup ref="Implies.attlist"/>
		</xs:attributeGroup>	
		<xs:attributeGroup name="Equivalent.attlist">
			<xs:attributeGroup ref="Equivalent.attlist"/>
		</xs:attributeGroup>

	  <xs:group name="formula-forall.content">
			<xs:choice>
				<xs:group ref="formula-forall.content"/>
			</xs:choice>
		</xs:group>	
		<xs:group name="formula-exists.content">
			<xs:choice>
				<xs:group ref="formula-exists.content"/>
			</xs:choice>
		</xs:group>
		<xs:attributeGroup name="Forall.attlist">
			<xs:attributeGroup ref="Forall.attlist"/>
		</xs:attributeGroup>
		<xs:attributeGroup name="Exists.attlist">
			<xs:attributeGroup ref="Exists.attlist"/>
		</xs:attributeGroup>		

		<xs:attributeGroup name="Query.attlist">
			<xs:attributeGroup ref="Query.attlist"/>
		</xs:attributeGroup>
	  
	</xs:redefine>
</xs:schema>
