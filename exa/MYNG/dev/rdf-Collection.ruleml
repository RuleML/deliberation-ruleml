<?xml-model href="http://ruleml.org/1.0/relaxng/schema_rnc.php?backbone=x3f&amp;default=x7&amp;termseq=x2&amp;lng=x1&amp;propo=x3f&amp;implies=x7&amp;terms=xf3f&amp;quant=x3&amp;expr=xf&amp;serial=xf" type="application/relax-ng-compact-syntax"?>

<!--<?xml-model href="http://ruleml.org/1.0/xsd/naffologeq.xsd" type="application/xml" schematypens="http://www.w3.org/2001/XMLSchema"?>-->
<?xml-model href="rdf.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<RuleML xmlns="http://ruleml.org/spec"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:ex="http://example.org#"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:s="http://example.org/students/vocab#">
  <!-- This example shows how a sublanguage of arbitrary expressivity 
       (in this case naffologeq)
       can be restricted to binary (zero or two) positional arguments.
       
       We use this restricted language below to assert the equivalence
       of a particular RDF triple to a RuleML binary predicate.
  -->
  <act index="1">
    <Assert>
      <Equivalent>
        <Atom>
          <Rel>Truth Value</Rel>
          <Data>
            <rdf:Description
              rdf:about="http://example.org/courses/6.001">
              <s:students rdf:parseType="Collection">
                <rdf:Description
                  rdf:about="http://example.org/students/Amy"/>
                <rdf:Description
                  rdf:about="http://example.org/students/Mohamed"/>
                <rdf:Description
                  rdf:about="http://example.org/students/Johann"/>
              </s:students>
            </rdf:Description>
          </Data>
          <Ind>isTrue</Ind>
        </Atom>
        <And>
          <Atom>
            <Rel iri="http://example.org/students/vocab#students"/>
            <Ind iri="http://example.org/courses/6.001"/>
            <Skolem>_1</Skolem>
          </Atom>
          <Atom>
            <Rel
              iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#first"/>
            <Skolem>_1</Skolem>
            <Ind iri="http://example.org/students/Amy"/>
          </Atom>
          <Atom>
            <Rel
              iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"/>
            <Skolem>_1</Skolem>
            <Skolem>_2</Skolem>
          </Atom>
          <Atom>
            <Rel
              iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#first"/>
            <Skolem>_2</Skolem>
            <Ind iri="http://example.org/students/Mohamed"/>
          </Atom>
          <Atom>
            <Rel
              iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"/>
            <Skolem>_2</Skolem>
            <Skolem>_3</Skolem>
          </Atom>
          <Atom>
            <Rel
              iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#first"/>
            <Skolem>_3</Skolem>
            <Ind iri="http://example.org/students/Johann"/>
          </Atom>
          <Atom>
            <Rel
              iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"/>
            <Skolem>_3</Skolem>
            <Ind iri="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>
          </Atom>
        </And>
      </Equivalent>
      <Atom>
        <Rel>Truth Value</Rel>
        <Data>
          <rdf:RDF>
            <rdf:Description
              rdf:about="http://example.org#subject">
              <ex:Predicate
                rdf:resource="http://example.org#object"/>
            </rdf:Description>
          </rdf:RDF>
        </Data>
        <Ind>isTrue</Ind>
      </Atom>
    </Assert>
  </act>
  <act index="2">
    <Query>
      <Atom>
        <Rel iri="http://example.org#Predicate"/>
        <Ind iri="http://example.org#subject"/>
        <Var>x</Var>
      </Atom>
    </Query>
  </act>
  <!-- Results
    <Ind iri = "http://example.org#object"/>
  -->
</RuleML>
