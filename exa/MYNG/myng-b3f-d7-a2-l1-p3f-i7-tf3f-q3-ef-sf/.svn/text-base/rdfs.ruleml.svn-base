<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE doc [
<!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
<!ENTITY xs "http://www.w3.org/2001/XMLSchema">
<!ENTITY this "http://www.animals.fake/animals#">
]>

<?xml-model href="http://ruleml.org/1.0/relaxng/schema_rnc.php?backbone=x3f&amp;default=x7&amp;termseq=x2&amp;lng=x1&amp;propo=x3f&amp;implies=x7&amp;terms=xf3f&amp;quant=x3&amp;expr=xf&amp;serial=xf" type="application/relax-ng-compact-syntax"?>

<!--<?xml-model href="http://ruleml.org/1.0/xsd/naffologeq.xsd" type="application/xml" schematypens="http://www.w3.org/2001/XMLSchema"?>
-->
<RuleML xmlns="http://ruleml.org/spec"
  xmlns:rdf="&rdf;"
  xmlns:xsi="&xs;-instance"
  xmlns:xs="&xs;"
  >
  <!-- This example shows how a sublanguage of arbitrary expressivity 
       (in this case naffologeq)
       can be restricted to binary (zero or two) positional arguments.
       
       We use this restricted language below to
       implement the structural axioms necessary to reason with the
       RDFS property "subClassOf".
       
       Expressivity at the level of FOL is needed because of the
       complexity of the nested quantifications and implication,
       but all predicates have arity 2 because the axioms are about
       RDF and RDFS predicates.

       Here is the RDF, from http://www.w3schools.com/rdf/rdf_schema.asp,
       that inspired this example:       
       <rdf:RDF
       xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
       xml:base="http://www.animals.fake/animals#">
       
       <rdf:Description rdf:ID="animal">
       <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
       </rdf:Description>
       
       <rdf:Description rdf:ID="horse">
       <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>
       <rdfs:subClassOf rdf:resource="#animal"/>
       </rdf:Description>
       
       </rdf:RDF> 
  -->
  <Assert>
    <!-- Structural Axioms for the RDFS predicate "subClassOf". 
         CLASS1 is a subclass of CLASS2 if and only if
         every individual of type CLASS1 is also of type CLASS2.-->
    <Equivalent closure="universal">
      <torso>
        <Atom>
          <Var>?CLASS1</Var>
          <Rel
            iri="&rdfs;subClassOf"/>
          <Var>?CLASS2</Var>
        </Atom>
      </torso>
      <torso>
        <Forall>
          <declare>
            <Var>?IND</Var>
          </declare>
          <Implies>
            <if>
              <Atom>
                <Var>?IND</Var>
                <Rel
                  iri="&rdf;type"/>
                <Var>?CLASS1</Var>
              </Atom>
            </if>
            <then>
              <Atom>
                <Var>?IND</Var>
                <Rel
                  iri="&rdf;type"/>
                <Var>?CLASS2</Var>
              </Atom>
            </then>
          </Implies></Forall>
      </torso>
    </Equivalent>    
  </Assert>
  <Assert>
    <!-- A simple taxonomy "The class horse is a subclass of class animal" -->
    <Rulebase>
      <Atom>
        <Ind iri="&this;animal"/>
        <Rel iri="&rdf;type"/>
        <Ind iri="&rdfs;Class"/>
      </Atom>
      <Atom>
        <Ind iri="&this;horse"/>
        <Rel iri="&rdf;type"/>
        <Ind iri="&rdfs;Class"/>
      </Atom>
      <Atom>
        <Ind iri="&this;horse"/>
        <Rel iri="&rdfs;subClassOf"/>
        <Ind iri="&this;animal"/>
      </Atom>
    </Rulebase>
  </Assert>
  <Assert>
    <!-- A simple fact "Nellie is a horse" -->
    <Rulebase>
      <Atom>
        <Ind>Nellie</Ind>
        <Rel iri="&rdf;type"/>
        <Ind iri="&this;horse"/>
      </Atom>
    </Rulebase>
  </Assert>
  
  <Query>
    <!-- A query on the existence of individuals known to be of type animal 
         "What has type animal?-->
    <Atom>
      <Var>?WHAT</Var>
      <Rel iri="&rdf;type"/>
      <Ind iri="&this;animal"/>
    </Atom>
  </Query>
  <!-- Results
    Solution  Variable           Binding
    TRUE      <Var>?WHAT</Var>   <Ind>Nellie</Ind>
  -->
</RuleML>
